<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git现学现用</title>
    <url>/2023/05/18/Git%E7%8E%B0%E5%AD%A6%E7%8E%B0%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>Git是一个开源的分布式版本控制系统。</p>
</blockquote>
<p><tt>Linux内核开源项目有着为数众多的参与者。最初是Linus手动合并各方大神的代码，后面很难进行手工管理了，故整个项目组启用了一个专有的分布式版本控制系统BitKeeper来管理和维护代码。好景不长，后面因为有内鬼的缘故导致合作关系结束，Linus含泪开发了Git用于分布式版本控制。</p>
<span id="more"></span>

<br/>

<h1 id="一、版本控制"><a href="#一、版本控制" class="headerlink" title="一、版本控制"></a>一、版本控制</h1><p>什么是版本控制？简单来说就是<strong>记录</strong>和<strong>管理</strong>、<strong>跟踪</strong>版本信息迭代的过程。就存档类游戏而言，我们需要不断对游戏进度就进行存档，以保证退出游戏后当前游戏进度不会丢失，而每一次的存档就相当于这个地方的版本，我们有必要对版本进行控制。</p>
<p>版本控制分为本地版本控制、集中版本控制以及分布式版本控制，常见的版本控制工具有Git、SVN以及CVS等。</p>
<p><img src="/2023/05/18/Git%E7%8E%B0%E5%AD%A6%E7%8E%B0%E7%94%A8/image-20230518222049535.png" alt="image-20230518222049535"></p>
<p><br/><br/></p>
<h1 id="二、Git使用"><a href="#二、Git使用" class="headerlink" title="二、Git使用"></a>二、Git使用</h1><h2 id="1-Git基本概念"><a href="#1-Git基本概念" class="headerlink" title="1. Git基本概念"></a>1. Git基本概念</h2><p>Git是我们进行分布式版本控制的基石。Git使得客户端拥有仓库的完整镜像，即使服务器挂了也不要紧，事后可以用任何一个镜像出来的本地仓库恢复。</p>
<p>在这种模式下，Git中存在着三块区域：工作区、暂存区以及仓库。工作区就是我们在电脑里能看到的目录；暂存区本质上是一个文件(.git&#x2F;index)，临时存放我们的改动；仓库是Git用来保存项目的元数据和对象数据库的地方，工作区中有个.git目录，该目录就是本地仓库。</p>
<p>三块区域也对应着三种状态：已修改、已暂存和已提交。如果Git目录中保存着特定版本的文件，就属于<strong>已提交</strong>的状态；如果文件已修改并放入暂存区，就属于<strong>已暂存</strong>的状态；如果自上次检出后，作了修改但还没放入暂存区，就是<strong>已修改</strong>的状态。</p>
<p><img src="/2023/05/18/Git%E7%8E%B0%E5%AD%A6%E7%8E%B0%E7%94%A8/image-20230518224412426.png" alt="image-20230518224412426"></p>
<blockquote>
<p>仓库中的文件状态</p>
</blockquote>
<p>仓库中的文件状态有两种：已跟踪和未跟踪。未跟踪的文件不会被纳入版本控制。一般有些文件无需纳入Git的管理，也不希望出现在未跟踪列表，这时候可以使用**.gitignore**文件列出要忽略的文件模式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*.a # 忽略所有的.a文件</span><br><span class="line">!lib.a # 跟踪所有的lib.a</span><br><span class="line">/TODO # 只忽略当前目录下的TODO</span><br><span class="line">build/ # 忽略任何目录下名为build的文件</span><br><span class="line">doc/*.txt # 忽略doc/a.txt，但不忽略doc/a/a.txt</span><br></pre></td></tr></table></figure>

<br/>

<h2 id="2-Git下载与安装"><a href="#2-Git下载与安装" class="headerlink" title="2. Git下载与安装"></a>2. Git下载与安装</h2><ul>
<li>常规下载</li>
</ul>
<blockquote>
<p>下载git OSX版：<a href="http://git-scm.com/download/mac">http://git-scm.com/download/mac</a></p>
<p>下载git Windows版：<a href="http://git-for-windows.github.io/">http://git-for-windows.github.io/</a></p>
<p>下载git Linux版：<a href="http://book.git-scm.com/2_installing_git.html">http://book.git-scm.com/2_installing_git.html</a></p>
</blockquote>
<ul>
<li>镜像站下载</li>
</ul>
<blockquote>
<p>国内镜像源：<a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/">https://registry.npmmirror.com/binary.html?path=git-for-windows/</a></p>
</blockquote>
<br/>

<h2 id="3-Git基础配置"><a href="#3-Git基础配置" class="headerlink" title="3. Git基础配置"></a>3. Git基础配置</h2><p>Git自带一个<code>git config</code>的工具来方便我们对配置文件中的变量进行操作。可以使用<code>git config --show-origin --list</code>来查看所有的配置和他们所在的文件。</p>
<table>
<thead>
<tr>
<th align="center">文件名及其位置</th>
<th align="center">作用</th>
<th align="center">选项</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&#x2F;etc&#x2F;.gitconfig</td>
<td align="center">针对所有用户及对应的仓库生效</td>
<td align="center">–system</td>
</tr>
<tr>
<td align="center">~&#x2F;.gitconfig</td>
<td align="center">针对当前用户及对应的仓库生效</td>
<td align="center">–global</td>
</tr>
<tr>
<td align="center">.git&#x2F;config</td>
<td align="center">针对当前仓库</td>
<td align="center">–local</td>
</tr>
</tbody></table>
<ul>
<li>配置用户信息（必须配置）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;用户名&quot;</span><br><span class="line">git config --global user.email &quot;邮箱地址&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>查看帮助信息</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git -h</span><br></pre></td></tr></table></figure>

<ul>
<li>查看版本信息</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git -v</span><br></pre></td></tr></table></figure>

<ul>
<li>查看配置信息</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>

<br/>

<h2 id="4-Git基本操作"><a href="#4-Git基本操作" class="headerlink" title="4. Git基本操作"></a>4. Git基本操作</h2><ul>
<li>公钥生成</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen [-t rsa]# 生成公钥 -t 指定算法</span><br></pre></td></tr></table></figure>

<ul>
<li>新建本地仓库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init # 执行完会生成.git目录</span><br><span class="line">git clone URL # 远程</span><br></pre></td></tr></table></figure>

<ul>
<li>比较差异</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff # 查看已修改和已暂存文件（同一份）的内容差异</span><br></pre></td></tr></table></figure>

<ul>
<li>工作目录-&gt;暂存区</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add &lt;filename&gt;</span><br><span class="line">git add * # 将当前目录下的所有文件到暂存区，纳入版本控制</span><br></pre></td></tr></table></figure>

<ul>
<li>查看状态</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<ul>
<li>删除文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm &lt;filename&gt; # 使用该命令记录此次移除的操作，告诉仓库删除了文件</span><br><span class="line">git add .</span><br></pre></td></tr></table></figure>

<ul>
<li>重命名文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git move old_name new_name</span><br></pre></td></tr></table></figure>

<ul>
<li>提交历史</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log # 按先后顺序列出所有的提交记录</span><br><span class="line"># --author=XXX 只看某个人的提交记录</span><br><span class="line"># --name-status 看看哪些文件修改了</span><br></pre></td></tr></table></figure>

<ul>
<li>暂存区-&gt;本地仓库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit</span><br><span class="line"># -m 备注信息</span><br><span class="line"># --amend 重新提交，替换掉之前的记录</span><br></pre></td></tr></table></figure>

<ul>
<li>版本回退</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^ # 回退到上一版本 </span><br><span class="line">git reset --hard HEAD^^ # 回退到上上版本 </span><br><span class="line">git reset --hard HEAD~100 # 回退到前100个版本 </span><br><span class="line">git reset --hard [版本号] # 回退到固定版本号 </span><br><span class="line">git reflog # 记录每一次的命令（可以查看版本号）</span><br></pre></td></tr></table></figure>

<p><code>--mixed</code>：用于重置暂存区的文件与指定的回退的版本的提交(commit)保持一致，工作区文件内容保持不变。</p>
<p><code>--soft</code>：参数用于回退到某个版本，暂存区不会重置，工作区也不会改，版本回退（git log 版本截止到回退的版本）</p>
<p><code>--hard</code>：参数撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到指定的回退版本，并删除之前的所有信息提交。</p>
<ul>
<li>添加远程仓库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add origin &lt;server&gt; # 添加远程仓库</span><br></pre></td></tr></table></figure>

<ul>
<li>查看远程仓库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure>

<ul>
<li>查看远程仓库信息</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote show &lt;remote&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>远程仓库的重命名</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote rename old_name new_name</span><br></pre></td></tr></table></figure>

<ul>
<li>推送文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<ul>
<li>获取更新</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch origin</span><br></pre></td></tr></table></figure>

<ul>
<li>移除远程仓库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure>

<ul>
<li>列出标签（可以理解为版本号）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag [-l/--list] [&quot;format&quot;]</span><br></pre></td></tr></table></figure>

<ul>
<li>创建标签</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 附注标签-完整对象</span><br><span class="line">git tag -a 标签 -m &quot;信息&quot; # -m指定一条将会存储在标签注的信息</span><br><span class="line">git show # 查看标签信息与之对应的提交信息</span><br><span class="line"># 轻量标签-引用</span><br><span class="line">git tag 标签</span><br><span class="line"># 后期添加标签</span><br><span class="line">git tag -a 标签 commit-id</span><br></pre></td></tr></table></figure>

<ul>
<li>共享标签</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin &lt;tagname&gt; # 默认情况git push命令不会将标签信息传送到远程服务器上，--tage可用于一次性推送很多标签</span><br></pre></td></tr></table></figure>

<ul>
<li>删除标签</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag -d 标签</span><br><span class="line"># 这种不会删除远程仓库的标签，删除标签后需要git push &lt;remote&gt; :refs/tags/&lt;tagname&gt;来更新远程仓库</span><br><span class="line">git push origin --delete &lt;tagname&gt; # 直接删除远程标签</span><br></pre></td></tr></table></figure>

<ul>
<li>检出标签</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout tagname</span><br></pre></td></tr></table></figure>

<ul>
<li>新建别名</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global alias.别名 命令</span><br><span class="line">git config --global alias.co checkout # 为checkout定义一个名为co的别名，相当于git co等价于git checkout</span><br></pre></td></tr></table></figure>

<ul>
<li>删除别名</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global unset alias.别名</span><br></pre></td></tr></table></figure>

<ul>
<li>新建分支</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch testing</span><br></pre></td></tr></table></figure>

<ul>
<li>切换分支</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout testing # HEAD指向testing分支</span><br></pre></td></tr></table></figure>

<ul>
<li>新建并切换</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b &lt;newbranchname&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>分支合并</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge &lt;branchname&gt;</span><br><span class="line"># 对于同一个文件同一处的异常进行合并时会产生冲突</span><br></pre></td></tr></table></figure>

<ul>
<li>修改主分支名称</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -M main</span><br></pre></td></tr></table></figure>

<ul>
<li>删除分支</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -d &lt;branchname&gt;</span><br><span class="line"># 使用-D强制删除，分支未合并时使用</span><br></pre></td></tr></table></figure>

<ul>
<li>查看分支列表</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch # 带*号的是当前分支</span><br><span class="line">git branch -v # 查看每个分支最后一次提交</span><br><span class="line"># --merged/--no-merged 过滤是否合并到当前分支的分支</span><br></pre></td></tr></table></figure>

<ul>
<li>推送分支</li>
</ul>
<p>远程分支是对远程仓库的引用。以<code>&lt;remote&gt;/&lt;branch&gt;</code>的形式命名。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"># git push &lt;remote&gt; &lt;localbranch&gt;:&lt;remotebranch&gt;</span><br><span class="line"># 将localbranch分支推送到remotebranch分支</span><br><span class="line"># git config --global credential.helper cache</span><br><span class="line"># 避免我们每次推送时都要被询问用户名和密码[URL形式推送]</span><br></pre></td></tr></table></figure>

<ul>
<li>删除远程分支</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push &lt;remote&gt; --delete serverfix</span><br></pre></td></tr></table></figure>

<br />

<br />

<h1 id="三、参考"><a href="#三、参考" class="headerlink" title="三、参考"></a>三、参考</h1><p><tt>菜鸟教程：<a href="https://www.runoob.com/git/git-tutorial.html">https://www.runoob.com/git/git-tutorial.html</a></p>
<p><tt>Pro Git：<a href="https://git-scm.com/book/en/v2">https://git-scm.com/book/en/v2</a></p>
<p><tt>廖雪峰老师Git教程：<a href="https://www.liaoxuefeng.com/wiki/896043488029600/896067008724000">https://www.liaoxuefeng.com/wiki/896043488029600/896067008724000</a></p>
<p><tt>猴子都能懂的Git入门：<a href="https://backlog.com/git-tutorial/cn/">https://backlog.com/git-tutorial/cn/</a></p>
<p><tt>交互式Git学习：<a href="https://learngitbranching.js.org/?locale=zh_CN">https://learngitbranching.js.org/?locale=zh_CN</a></p>
<p><tt>码神：<a href="https://mszlu.com/git/01/01.html">https://mszlu.com/git/01/01.html</a></p>
<p><tt>易百教程：<a href="https://www.yiibai.com/git">https://www.yiibai.com/git</a></p>
]]></content>
  </entry>
</search>
